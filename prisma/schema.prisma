generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model User {
  id             String    @id @default(cuid())
  name           String
  username           String @unique @default(cuid())
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  country        String    @default("")
  state          String    @default("")
  city           String    @default("")
  intrests       String[]  @default([])
  followingIds String[] @default([])
  rating      Float    @default(0)
  favoriteIds String[] @default([])
  bio         String   @default("")
  gender      String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  activate    Boolean  @default(false)

  conversations Conversation[]
  messages      Message[]
  seenMessages  Message[]      @relation("seenMessages")

  reviewsBy Review[] @relation("reviewsBy")
  reviews   Review[] @relation("reviewsTo")

  accounts       Account[]
  ActivateTokens ActivateToken[]

  products             Product[]
  notificationsTo      Notification[] @relation("userTo")
  notificationsFrom    Notification[] @relation("userFrom")
  sentRequestsUser     Request[]      @relation("sentRequestsUser")
  receivedRequestsUser Request[]      @relation("receivedRequestsUser")
}

model ActivateToken {
  id          String    @id @default(cuid())
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  productId     String
  requestId     String

  product  Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  request  Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  messages Message[]
  users    User[]
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Message {
  id        String   @id @default(uuid())
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seen User[] @relation("seenMessages")

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal
  favoriteIds String[] @default([])

  country String @default("")
  state   String @default("")
  city    String @default("")

  userId                  String
  onRequest               Boolean        @default(false)
  user                    User           @relation(fields: [userId], references: [id])
  category                String
  images                  Image[]
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  conversations           Conversation[]
  sentRequestsProduct     Request[]      @relation("sentRequestsProduct")
  receivedRequestsProduct Request[]      @relation("receivedRequestsProduct")
}

model Request {
  id            String  @id @default(uuid())
  sentToProduct String
  sentByProduct String
  productSentTo Product @relation("sentRequestsProduct", fields: [sentToProduct], references: [id], onDelete: Cascade)
  productSentBy Product @relation("receivedRequestsProduct", fields: [sentByProduct], references: [id], onDelete: Cascade)

  sentToUser String
  sentByUser String
  userSentTo User   @relation("sentRequestsUser", fields: [sentToUser], references: [id], onDelete: Cascade)
  userSentBy User   @relation("receivedRequestsUser", fields: [sentByUser], references: [id], onDelete: Cascade)

  messageReject String   @default("")
  status        String   @default("Pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  reviews       Review[]
  notifications       Notification[]
  conversations Conversation[]
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Notification {
  id       String @id @default(uuid())
  type     String
  content String? @default("")
  userToId String?
  userTo   User?   @relation("userTo", fields: [userToId], references: [id], onDelete: Cascade)
  requestId String?
  request Request? @relation (fields: [requestId], references: [id], onDelete: Cascade)
   reviewId String?
  review Review? @relation (fields: [reviewId], references: [id], onDelete: Cascade)
  userFromId String?
  userFrom   User?     @relation("userFrom", fields: [userFromId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  open Boolean @default(false)
}

model Review {
  id          String   @id @default(uuid())
  reviewsToId String
  reviewsTo   User     @relation("reviewsTo", fields: [reviewsToId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation("reviewsBy", fields: [userId], references: [id], onDelete: Cascade)
  requestId   String? 
  request     Request?  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  rate        Int
  comment     String
  createdAt   DateTime @default(now())
  notifications Notification[]

}

model TransactionHash{
    id          String   @id @default(uuid())
    hash String
    requestId String

}
model Category {
  id              Int        @id @default(autoincrement())
  name            String
  parentId        Int?
  parent          Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories   Category[] @relation("Subcategories")
}
